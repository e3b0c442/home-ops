---
- block:
    - name: Retrieve existing kubeconfig
      slurp:
        src: /etc/rancher/k3s/k3s.yaml
      when: inventory_hostname == groups['k3s_server'][0]
      register: kubeconfig_slurp
      ignore_errors: true

    - name: Set not bootstrapped fact
      set_fact:
        k3s_cluster_bootstrapped: false
      when: inventory_hostname == groups['k3s_server'][0] and kubeconfig_slurp.failed

    - meta: end_play
      when: inventory_hostname == groups['k3s_server'][0] and kubeconfig_slurp.failed

    - name: Set kubeconfig fact
      set_fact:
        kubeconfig: "{{ kubeconfig_slurp.content | b64decode | from_yaml }}"

    - name: Update IP in kubeconfig
      ansible.utils.update_fact:
        updates:
          - path: kubeconfig.clusters[0].cluster.server
            value: "https://{{ kube_api_ip }}:6443"
      register: kubeconfig_update

    - name: Write kubeconfig to local tmp
      become: false
      copy:
        content: "{{ kubeconfig_update.kubeconfig | to_yaml }}"
        dest: "/tmp/kubeconfig"
        mode: 0600
      delegate_to: localhost

    - name: Kubernetes get cluster info
      become: false
      kubernetes.core.k8s_cluster_info:
        kubeconfig: "/tmp/kubeconfig"
      register: k8s_cluster_info
      delegate_to: localhost
      ignore_errors: true
      timeout: 10

    - name: Set bootstrapped fact
      set_fact:
        k3s_cluster_bootstrapped: "{{ not k8s_cluster_info.failed }}"
    
  always:
    - name: Clean up temporary kubeconfig
      become: false
      file:
        path: "/tmp/kubeconfig"
        state: absent
      delegate_to: localhost
      ignore_errors: true
